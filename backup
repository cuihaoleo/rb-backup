#!/bin/bash

set -e

BASEDIR="$(readlink -f $(dirname "$0"))"
PROFILE="$1"
ACTION="${2:-backup}"
EPOCH=$(date +%s)

BTRFS='btrfs'
RSYNC='rsync --fake-super'

readonly BASEDIR PROFILE EPOCH BTRFS RSYNC

# log-related functions {{{
log () {
    local mesg=$1; shift
    if [ -f "$GLOBAL_LOG" ]; then
        date --iso-8601=seconds | tr -d "\n" >> $GLOBAL_LOG
        printf " ${mesg}\n" "$@" >> $GLOBAL_LOG
    fi
}

panick () {
    local mesg=$1; shift
    local str=$(printf "==> ERROR: ${mesg}\n" "$@")
    log "$str"; echo $str >&2
    exit 1
}

msg() {
    local mesg=$1; shift
    local str=$(printf "==> ${mesg}\n" "$@")
    log "$str"; echo $str
}
# }}}

check_subvolume () {
    local subvol=$1

    if [ -d "$subvol" ]; then
        local errmsg=$(LC_ALL=C btrfs subvolume show "$1" 2>&1 || true)
        if [[ "$errmsg" == "ERROR: '"*"' is not a subvolume" ]]; then
            panick "$subvol exist but not a btrfs subvolume!"
        fi
    else
        $BTRFS subvol create $subvol \
            || panick "Failed to create subvolume $subvol"
    fi
}

parse_profile () {
    local common_conf="${BASEDIR}/common.conf"
    local profile_conf="${BASEDIR}/profiles/${PROFILE}.conf"

    declare -g -A conf

    confSRC=()
    if [ -f $profile_conf ]; then
        while read line; do
            if [[ "$line" == ?*=?* ]] && ! [[ "$line" == \#* ]]; then
                local key=${line%%=*} value=${line#*=}
                if [[ "$key" == "SRC" ]]; then
                    confSRC+=("$value")
                else
                    conf[$key]="$value"
                fi
            fi
        done < <( \
            [ -f "$common_conf" ] && cat "$common_conf"
            cat $profile_conf
        )
    else
        panick "Backup profile not found!"
    fi

    fallback_conf () {
        local key=$1 value=$2
        conf["$1"]=${conf["$1"]:-"$2"}
    }

    fallback_conf SSH_KEY "${BASEDIR}/keys/${conf[USER]}@${conf[SERVER]}"
    fallback_conf LOG_DIR "${BASEDIR}/log/${PROFILE}/"
    fallback_conf RSYNC_OPTS '-aHAX --timeout 3600 --delete'
    fallback_conf RSYNC_EXCLUDE '--exclude=/lost+found'
    fallback_conf KEEP_DAYS 30
    fallback_conf KEEP_LONG_COUNT 4

    # some shortcut global variables
    SYNC_TO="${conf[STORAGE]}/${PROFILE}"
    RSH_OPTS="ssh -i ${conf[SSH_KEY]}"
    KEEP_SECONDS="$((conf[KEEP_DAYS]*86400))"
    SYNC_TO_CURRENT="${SYNC_TO}/current"
}

init_log () {
    local log_dir=$1

    GLOBAL_LOG="${log_dir}/backup.log.${EPOCH}"
    RSYNC_LOG="${log_dir}/rsync.log.${EPOCH}"

    touch "$GLOBAL_LOG"
    log "Script start at %s" "$(date --date=@$EPOCH --iso-8601=seconds)"
}

check_and_prepare () {
    # initialize log
    [ -d ${conf["LOG_DIR"]} ] || mkdir ${conf["LOG_DIR"]}
    init_log ${conf["LOG_DIR"]}

    # these variable are demanded and no fallback
    [ -z $confSRC ] && panick "No SRC specified!"
    for key in 'SERVER' 'USER' 'STORAGE'; do
        [ -z ${conf[$key]} ] && panick "Backup profile invalid!"
    done

    # SSH key must be provided to login remote
    [ -f "${conf["SSH_KEY"]}" ] || panick "SSH key not found!"


    if [[ $(stat -f -c %T "${conf[STORAGE]}") != "btrfs" ]]; then
        panick "Backup storage is not on a btrfs partition!"
    elif [[ $(stat -c "%u" "${conf[STORAGE]}") != "$(id -u)" ]]; then
        panick "Backup storage is not owned by you!"
    else
        check_subvolume "${SYNC_TO}"
        check_subvolume "${SYNC_TO}/current"
    fi
}

list_snapshots () {
    local dir="$1"
    local prefix="$2"

    find "$dir" -mindepth 1 -maxdepth 1 -type d -readable \
                -name "${prefix}*" -printf "%f\n" \
        | sort -t_ -k2 -n
}

make_snapshot () {
    local lastest_l_snap=$(list_snapshots "$SYNC_TO" L_ | tail -n1)
    lastest_l_snap=${lastest_l_snap:-"L_0"}

    if [ $((${lastest_l_snap#L_}+${KEEP_SECONDS})) -lt $(date +%s) ] \
        && [ ${conf[KEEP_LONG_COUNT]} -gt 0 ]; then
        msg "Create long-live backup: %s" "L_$EPOCH"
        $BTRFS subvol snapshot -r "$SYNC_TO_CURRENT" "${SYNC_TO}/L_$EPOCH"
    else
        msg "Create short-live backup: %s" "S_$EPOCH"
        $BTRFS subvol snapshot -r "$SYNC_TO_CURRENT" "${SYNC_TO}/S_$EPOCH"
    fi
}

clean_snapshots () {
    # Clean long-time snapshots
    list_snapshots "$SYNC_TO" L_ | head -n-${conf[KEEP_LONG_COUNT]} \
    | while read subvol; do
        msg "Delete old backup ${subvol}"
        $BTRFS property set -ts  "${SYNC_TO}/${subvol}" ro false
        $BTRFS subvolume delete "${SYNC_TO}/${subvol}"
    done

    # Clean short-time snapshots
    list_snapshots "$SYNC_TO" S_ \
    | while read subvol; do
        if [ ${subvol#S_} -lt $((EPOCH-$KEEP_SECONDS)) ]; then
            msg "Delete old backup ${subvol}"
            $BTRFS property set -ts  "${SYNC_TO}/${subvol}" ro false
            $BTRFS subvolume delete "${SYNC_TO}/${subvol}"
        fi
    done
}

do_rsync_atom () {
    local src=$1

    $RSYNC -e "$RSH_OPTS" ${conf[RSYNC_OPTS]} \
           --log-file "$RSYNC_LOG" \
           ${conf[RSYNC_EXCLUDE]} \
           "${conf[USER]}@${conf[SERVER]}:${src}" \
           "$SYNC_TO_CURRENT"
    local ret=$?

    for stat in 0 23 24 25; do
        [[ $ret == $stat ]] && return 0
    done

    return 1
}

do_rsync () {
    local success=0

    set +e
    if [[ ${#confSRC[@]} == 1 ]]; then
        do_rsync_atom "${confSRC[0]}/" && success=$((success+1))
    else
        for SRC in ${confSRC[@]}; do
            do_rsync_atom "${SRC%/}" && success=$((success+1))
        done
    fi
    set -e

    [[ $success == 0 ]] && panick "Failed to backup :("
    return 0
}

# main {{{
[ "$(whoami)" == root ] && panick "No root please :("

parse_profile 

case "$ACTION" in
    backup)
        check_and_prepare
        do_rsync
        make_snapshot
        clean_snapshots
        ;;
    list)
        echo "$SYNC_TO"
        list_snapshots "$SYNC_TO" "" | sed 's_^_  _'
        ;;
    *)
        panick "Unknown action: $ACTION"
esac
# }}}

